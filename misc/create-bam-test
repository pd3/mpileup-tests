#!/usr/bin/env perl
#
# Author: petr.danecek@sanger
#

use strict;
use warnings;
use Carp;

my $opts = parse_params();
create_test($opts);

exit;

#--------------------------------

sub error
{
    my (@msg) = @_;
    if ( scalar @msg ) { confess @msg; }
    print
        "Usage: create-bam-test [OPTIONS]\n",
        "Options:\n",
        "   -a, --anonymize                 Anonymize properly, including shuffling of A,C,G,T bases\n",
        "   -b, --bam FILE                  \n",
        "   -f, --fa-ref FILE               \n",
        "   -k, --keep-samples              \n",
        "   -o, --output-prefix PATH        \n",
        "   -O, --offset INT                \n",
        "   -r, --region REGION             \n",
        "   -h, -?, --help                  This help message.\n",
        "Examples:\n",
        "   create-bam-test -a -b file.bam -f ref.fa -r 17:3988 -o slice\n",
        "\n";
    exit -1;
}
sub parse_params
{
    my $opts = {};
    if ( -t STDIN && !@ARGV ) { error(); }
    while (defined(my $arg=shift(@ARGV)))
    {
        if ( $arg eq '-a' || $arg eq '--anonymize' ) { $$opts{anonymize}=1; next }
        if ( $arg eq '-b' || $arg eq '--bam' ) { push @{$$opts{bam}},shift(@ARGV); next }
        if ( $arg eq '-f' || $arg eq '--fa-ref' ) { $$opts{ref}=shift(@ARGV); next }
        if ( $arg eq '-k' || $arg eq '--keep-samples' ) { $$opts{keep_samples}=1; next }
        if ( $arg eq '-o' || $arg eq '--output-prefix' ) { $$opts{out}=shift(@ARGV); next }
        if ( $arg eq '-O' || $arg eq '--offset' ) { $$opts{offset}=shift(@ARGV); next }
        if ( $arg eq '-r' || $arg eq '--region' ) { $$opts{region}=shift(@ARGV); next }
        if ( $arg eq '-?' || $arg eq '-h' || $arg eq '--help' ) { error(); }
        error("Unknown parameter \"$arg\". Run -h for help.\n");
    }
    if ( !exists($$opts{bam}) ) { error("Missing the -b option.\n") }
    if ( !exists($$opts{ref}) ) { error("Missing the -f option.\n") }
    if ( !exists($$opts{out}) ) { error("Missing the -o option.\n") }
    if ( !exists($$opts{region}) ) { error("Missing the -r option.\n") }
    return $opts;
}
sub read_bam
{
    my ($opts,$ibam,$chr,$beg,$end) = @_;
    my $bam   = $$opts{bam}[$ibam];
    my %names = ();     # anonymized read names
    my @reads = ();
    my @hdr   = ();
    my @rg    = ();
    my $cmd = "samtools view -h $bam $$opts{region}";
    open(my $fh,"$cmd |") or error("$cmd: $!");
    while (my $line=<$fh>)
    {
        my @vals = split(/\t/,$line);
        if ( $vals[0] eq '@HD' ) { push @hdr,$line; next; }
        if ( $$opts{keep_samples} && $vals[0] eq '@RG' ) { push @rg,$line; next; }
        if ( $vals[0] =~ /^\@/ ) { next; }
        if ( $vals[3] < $beg ) { $beg = $vals[3]; }
        if ( $vals[3] + length($vals[9]) > $end ) { $end = $vals[3] + length($vals[9]); }
        my $mate_mapped = 1;
        if ( $vals[6] ne $chr && $vals[6] ne '=' ) { $vals[6] = '='; $mate_mapped = 0; }
        if ( $vals[7] < $beg or $vals[7] > $end ) { $mate_mapped = 0; }
        if ( !$mate_mapped ) { $vals[1] &= ~0x8; $vals[6] = '*'; $vals[7] = $vals[3];  }
        chomp($vals[-1]);
        if ( !$$opts{keep_samples} )
        {
            my $i;
            for ($i=0; $i<@vals; $i++) { if ($vals[$i]=~/^RG:Z:/) { last; } }
            if ( $i!=@vals ) { splice(@vals,$i,1); }
            push @vals,"RG:Z:rg$ibam";
        }
        if ( $$opts{anonymize} )
        {
            if ( !exists($names{$vals[0]}) ) { $names{$vals[0]} = 'read'.(scalar keys %names); }
            $vals[0] = $names{$vals[0]};
            $vals[2] = $$opts{new_chr};
            $vals[9] = shuffle_seq($opts,$vals[9]);
        }
        push @reads, \@vals;
    }
    close($fh) or error("close failed: $cmd");
    return { hdr=>\@hdr, rg=>\@rg, reads=>\@reads, beg=>$beg, end=>$end };
}
sub shuffle_seq
{
    my ($opts,$seq) = @_;
    for (my $i=0; $i<length($seq); $i++)
    {
        my $nuc = uc(substr($seq,$i,1));
        if ( !exists($$opts{new_nuc}{$nuc}) ) { error("Nucleotide '$nuc' not recognised\n"); }
        substr($seq,$i,1,$$opts{new_nuc}{$nuc});
    }
    return $seq;
}
sub create_test
{
    my ($opts) = @_;
    my ($chr,$beg,$end);
    if ( $$opts{region}=~/^([^:]+):(\d+)-(\d+)$/ )
    {
        $chr = $1; $beg = $2; $end = $3;
    }
    elsif ( $$opts{region}=~/^([^:]+):(\d+)$/ )
    {
        $chr = $1; $beg = $2; $end = $2;
        $$opts{region} = "$chr:$beg-$end";
    }
    else
    {
        error("Could not parse the region: $$opts{region}");
    }
    my $min_beg = $beg;
    my $max_end = $end;

    $$opts{new_chr} = $chr;
    if ( $$opts{anonymize} )
    {
        $$opts{new_chr} = 'chr';

        use List::Util 'shuffle';
        my @nuc = (qw(A C G T));
        while ( join('',@nuc) eq 'ACGT' ) { @nuc = shuffle(@nuc); }
        $$opts{new_nuc} = { A=>$nuc[0], C=>$nuc[1], G=>$nuc[2], T=>$nuc[3], N=>'N' };
        print STDERR "Nucleotides shuffled: ".join('',@nuc)."\n";
    }

    my @dat = ();
    for (my $i=0; $i<@{$$opts{bam}}; $i++)
    {
        my $dat = read_bam($opts,$i,$chr,$beg,$end);
        push @dat,$dat;
        if ( $min_beg > $$dat{beg} ) { $min_beg = $$dat{beg}; }
        if ( $max_end < $$dat{end} ) { $max_end = $$dat{end}; }
    }

    open(my $out,'>',"$$opts{out}.sam") or error("$$opts{out}.sam: $!");
    print $out join('',@{$dat[0]{hdr}});
    print $out "\@SQ\tSN:$$opts{new_chr}\tLN:".($max_end-$min_beg+1)."\n";
    if ( $$opts{keep_samples} )
    {
        for my $dat (@dat)
        {
            print $out join('',@{$$dat{rg}});
        }
    }
    else
    {
        for (my $i=0; $i<@{$$opts{bam}}; $i++)
        {
            print $out "\@RG\tID:rg$i\tSM:sample$i\n";
        }
    }

    if ( exists($$opts{offset}) ) { $beg = abs($$opts{offset}) + 1; }

    for my $dat (@dat)
    {
        my $reads = $$dat{reads};
        for my $read (@$reads)
        {
            $$read[3] -= $min_beg - 1;
            $$read[7] -= $min_beg - 1;
            print $out join("\t",@$read)."\n";
        }
    }
    close($out) or error("close failed: $$opts{out}.sam");

    `samtools sort $$opts{out}.sam | samtools view -b -o $$opts{out}.bam`;
    `samtools index $$opts{out}.bam`;
    `samtools faidx $$opts{ref} $chr:$min_beg-$max_end | sed 's,:, ,' > $$opts{out}.fa`;
    if ( $$opts{anonymize } )
    {
        my @seq = grep {chomp} `samtools faidx $$opts{ref} $chr:$min_beg-$max_end`;
        $seq[0] = ">$$opts{new_chr}";
        for (my $i=1; $i<@seq; $i++)
        {
            $seq[$i] = shuffle_seq($opts,$seq[$i]);
        }
        open(my $fh,'>',"$$opts{out}.fa") or error("$$opts{out}.fa: $!");
        print $fh join("\n",@seq)."\n";
        close($fh) or error("close failed: $$opts{out}.fa");
    }
    `samtools faidx $$opts{out}.fa`;

    print "offset\t-".($min_beg-1)."\n";
    printf "region\t%s:%d-%d\n",$chr,$beg-$min_beg+1,$end-$min_beg+1;
}

